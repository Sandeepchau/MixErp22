@using MixERP.Purchases.Extensions
@model dynamic

@{
    Layout = ViewBag.PurchaseLayoutPath;
}

<style>
    .ticket.panel {
        padding: 2em 0.2em;
    }

    #TicketIframe {
        background-color: white;
        width: 450px;
        height: 500px;
        border: none;
        margin: 1em 0.2em;
        padding: 0.5em;
        box-shadow: 2px 2px 10px #ddd;
        display: block;
    }
</style>
@Html.InventoryPartialView("Shared/ClassicCheckout.cshtml", TenantConvention.GetTenant())

<script>
	window.isSales = false;

	// allow 4 decimal digits
    $("#QuantityInputText").removeClass("decimal");

    $("#QuantityInputText").off("keypress").on("keypress", function (evt) {

        var charCode = evt.which;
        const quantity = $(this).val();

        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        };

        if (!quantity) {
            if (charCode === 46) {
                $(this).val("0");
            };
            return true;
        };

        if (quantity.indexOf(".") === 0) {
            return true;
        };

        if (charCode === 46) {
            if (quantity.indexOf(".") > 0) {
                return false;
            };

            if (quantity.split('.').length === 2)
                if (quantity.split('.')[1].length > 4) {
                    return false;
                };
        };
    });

    $("body").on("keyup", "#QuantityInputText", function (evt) {
        const quantity = $(this).val().split('.');

        if (quantity.length === 2 && quantity[1].length > 4) {
            $(this).val(quantity[0] + "." + quantity[1].substring(0, 4));
        };
    });
	
    setTimeout(function() {
        if (window.getQueryStringByName("type") === "nontaxable") {
            $("#SalesTaxRateHidden").remove();
        };
    }, 1000);

    $("#SaveButton").off("click").on("click", function() {
        function request(model) {
            const url = "/dashboard/purchase/tasks/entry/new";
            const data = JSON.stringify(model);
            return window.getAjaxRequest(url, "POST", data);
        };

        function getModel() {
            const model = window.getModel();

            if (window.getQueryStringByName("type") === "nontaxable") {
                for (let i = 0; i < model.Details.length; i++) {
                    model.Details[i].IsTaxed = false;
                };

                model.NonTaxableTotal += model.TaxableTotal;
                model.TaxableTotal = 0;
            };

            return model;
        };

        const model = getModel();

        if (!model) {
            return;
        };

        const button = $(this);
        button.addClass("loading").prop("disabled", true);

        const ajax = request(model);

        ajax.success(function(response) {
            button.removeClass("loading").prop("disabled", false);
            const id = response;
            if (window.location.href.slice(window.location.href.indexOf('?')) === "?type=nontaxable")
                document.location =
                    `/dashboard/purchase/tasks/entry/checklist/${id}${window.location.href.slice(window.location.href
                        .indexOf('?'))}`;
            else
                document.location = `/dashboard/purchase/tasks/entry/checklist/${id}`;
        });

        ajax.fail(function(xhr) {
            button.removeClass("loading").prop("disabled", false);
            window.displayMessage(JSON.stringify(xhr));
        });
    });

    $(".customer.field").remove();

    var model = {
        Title: window.translate("Purchase"),
        ProductApi: "/dashboard/purchase/tasks/items",
        PriceTypeApi: "/api/forms/purchase/price-types/display-fields",
        UpdateTotalExtension: function () {
            if (window.getQueryStringByName("type") === "nontaxable") {
                const taxableTotalEl = $("#TaxableTotalInputText");
                const nonTaxableTotalEl = $("#NonTaxableTotalInputText");

                let taxableTotal = window.parseFloat2(taxableTotalEl.val());
                let nonTaxableTotal = window.parseFloat2(nonTaxableTotalEl.val());

                nonTaxableTotal += taxableTotal;
                taxableTotal = 0;

                taxableTotalEl.val(window.getFormattedCurrency(taxableTotal));
                nonTaxableTotalEl.val(window.getFormattedCurrency(nonTaxableTotal));
            };
        },
        UpdatePrice: function () {
            function request(itemId, supplierId, priceTypeId, unitId) {
                var url = "/dashboard/purchase/tasks/cost-price/{itemId}/{supplierId}/{unitId}";
                url = url.replace("{itemId}", itemId);
                url = url.replace("{supplierId}", supplierId);
                url = url.replace("{priceTypeId}", priceTypeId);
                url = url.replace("{unitId}", unitId);

                return window.getAjaxRequest(url);
            };

            const itemId = $("#ItemSelect").val();
            const supplierId = window.parseInt2($("#SupplierSelect").val()) || 0;
            const priceTypeId = window.parseInt2($("#PriceTypeSelect").val()) || 0;
            const unitId = $("#UnitSelect").val();

            $(".checkout.segment").addClass("loading");

            const ajax = request(itemId, supplierId, priceTypeId, unitId);

            ajax.success(function (response) {
                var costPrice = window.parseFloat2(response);
                costPrice = window.round(costPrice, 2);

                $(".checkout.segment").removeClass("loading");

                const priceInput = $("#PriceInputText");
                priceInput.val(costPrice).trigger("keyup").trigger("change");
            });

            ajax.fail(function (xhr) {
                $(".checkout.segment").removeClass("loading");
                window.logAjaxErrorMessage(window.getAjaxErrorMessage(xhr));
            });

        }
    };

    window.initializeCheckout(model);

    window.overridePath = "/dashboard/purchase/tasks/entry";
</script>