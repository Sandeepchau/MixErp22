@model dynamic

@{
    ViewBag.Title = I18N.JournalView;
    Layout = ViewBag.FinanceLayoutPath;
}
<style>
    .modal iframe {
        border: none;
        height: 700px;
        width: 100%;
    }
</style>
<div class="ui attached page segment" style="min-height: 100%; padding: 3em;">
    <div class="ui huge title header"></div>
    <div class="ui divider"></div>
    <div class="ui basic buttons">
        <a id="AddNewButton" class="ui basic add new button"></a>
        <a id="ReturnButton" class="ui basic button" style=""></a>
        <div class="ui icon top left pointing export dropdown basic button" id="ExportDropDown" tabindex="0">
            <span>
                @I18N.Export
            </span>
            <div class="menu" tabindex="-1">
                <div class="header">
                    @I18N.ExportThisDocument
                </div>
                <a class="item" href="javascript:void(0);" onclick="createDoc();">
                    <i class="file word outline blue icon"></i> @I18N.ExportToDoc
                </a>
                <a class="item" href="javascript:void(0);" onclick="createXls();">
                    <i class="file excel outline green icon"></i> @I18N.ExportToExcel
                </a>
                <a class="item" href="javascript:void(0);" onclick="createPDF();">
                    <i class="file pdf outline red icon"></i> @I18N.ExportToPDF
                </a>
            </div>
        </div>
        <a id="PrintButton" href="javascript:void(0);" onclick="print()" class="ui basic button">
            @I18N.Print
        </a>
    </div>

    <div class="ui stackable form segment" id="Annotation" style="">
        <div class="eight fields">
            <div class="field">
                <input class="date" data-persist placeholder="@I18N.From" id="FromInputDate" title="@I18N.From" type="date">
            </div>
            <div class="field">
                <input class="date" data-persist placeholder="@I18N.To" id="ToInputDate" title="@I18N.To" type="date">
            </div>
            <div class="field">
                <input placeholder="@I18N.TranId" id="TranIdInputText" title="@I18N.TranId" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.TranCode" id="TranCodeInputText" title="@I18N.TranCode" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.ReferenceNumber" id="ReferenceNumberInputText" title="@I18N.ReferenceNumber" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.StatementReference" id="StatementReferenceInputText" title="@I18N.StatementReference" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.PostedBy" id="PostedByInputText" title="@I18N.PostedBy" type="text">
            </div>
        </div>
        <div class="eight fields">
            <div class="field">
                <input placeholder="@I18N.Amount" id="AmountInputText" title="@I18N.Amount" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.Office" id="OfficeInputText" title="@I18N.Office" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.Status" id="StatusInputText" title="@I18N.Status" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.VerifiedBy" id="VerifiedByInputText" title="@I18N.VerifiedBy" type="text">
            </div>
            <div class="field">
                <input placeholder="@I18N.Reason" id="ReasonInputText" title="@I18N.Reason" type="text">
            </div>
            <div class="field hidden">
                <input placeholder="@I18N.UserId" id="UserIdInputText" title="@I18N.UserId" type="text">
            </div>
            <div class="field hidden">
                <input placeholder="@I18N.OfficeId" id="OfficeIdInputText" title="@I18N.OfficeId" type="text">
            </div>
            <div class="field">
                <div class="ui green button" id="ShowButton">@I18N.Show</div>
            </div>
        </div>


    </div>

    <div class="fluid width overflown section">
        <table id="JournalView" class="ui nowrap table segment">
            <thead>
            <tr>
                <th>@I18N.Actions</th>
                <th>@I18N.Select</th>
                <th>@I18N.TranId</th>
                <th>@I18N.TranCode</th>
                <th>@I18N.ValueDate</th>
                <th>@I18N.BookDate</th>
                <th>@I18N.RefererenceNumberAbbreviated</th>
                <th>@I18N.Amount</th>
                <th>@I18N.StatementReference</th>
                <th>@I18N.PostedBy</th>
                <th>@I18N.Office</th>
                <th>@I18N.Status</th>
                <th>@I18N.VerifiedBy</th>
                <th>@I18N.VerifiedOn</th>
                <th>@I18N.Reason</th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<div class="ui large advice modal">
    <i class="close icon"></i>
    <iframe></iframe>
</div>
<input type="hidden" id="MarkupHidden"/>
<a id="DownloadAnchor"></a>
<script>
    function prepareView(model) {
        function displayTable(target, data) {
            target.find("tbody").html("");

            function getCell(text, isDate, hasTime) {
                const cell = $("<td/>");

                cell.text(text);

                if (isDate) {
                    const date = new Date(text);

                    if (hasTime) {
                        if ((text || "").trim()) {
                            cell.text(window.moment(date).fromNow() || "");
                            cell.attr("title", date.toLocaleString());
                        };
                    } else {
                        cell.text(date.toLocaleDateString());
                        cell.attr("title", text);
                    };
                };

                return cell;
            };

            function getActionCell(tranId) {
                const cell = $("<td/>");

                const checklistAnchor = $(`<a title='${window.translate("ChecklistWindow")}'><i class='list icon'></i></a>`);
                checklistAnchor.attr("href", model.ChecklistUrl.replace("{tranId}", tranId));
                cell.append(checklistAnchor);

                if (!model.NoJournalAdvice) {
                    const journalAdviceAnchor = $(`<a title='${window.translate("ViewJournalAdvice")}'><i class='search icon'></i></a>`);
                    journalAdviceAnchor.attr("href", "javascript:void(0);");
                    journalAdviceAnchor.attr("onclick", `showJournalAdvice(${tranId});`);
                    cell.append(journalAdviceAnchor);
                };


                $.each(model.AdviceButtons, function() {
                    const adviceButton = $(`<a title='${this.Title}'><i class='zoom icon'></i></a>`);
                    adviceButton.attr("href", (this.Href || "").replace("{tranId}", tranId));
                    adviceButton.attr("onclick", (this.OnClick || "").replace("{tranId}", tranId));
                    cell.append(adviceButton);
                });

                return cell;
            };

            function getSelectionCell() {
                const cell = $("<td/>");
                const checkbox = $("<div class='ui toggle checkbox'/>");
                const input = $("<input type='checkbox'/>");
                const label = $("<label/>");

                checkbox.append(input);
                checkbox.append(label);

                cell.append(checkbox);

                return cell;
            };

            const sorted = window.Enumerable.From(data)
                .OrderByDescending(function(x) {
                    return new Date(x.ValueDate);
                }).ThenByDescending(function(x) {
                    return new Date(x.VerifiedOn);
                }).ToArray();

            $.each(sorted, function() {
                const item = this;

                const row = $("<tr/>");

                row.append(getActionCell(item.TransactionMasterId));
                row.append(getSelectionCell(item.TransactionMasterId));
                row.append(getCell(item.TransactionMasterId));
                row.append(getCell(item.TransactionCode));
                row.append(getCell(item.ValueDate, true, false));
                row.append(getCell(item.BookDate, true, false));
                row.append(getCell(item.ReferenceNumber));
                row.append(getCell(item.Amount));
                row.append(getCell(item.StatementReference));
                row.append(getCell(item.PostedBy));
                row.append(getCell(item.Office));
                row.append(getCell(item.Status));
                row.append(getCell(item.VerifiedBy));
                row.append(getCell(item.VerifiedOn, true, true));
                row.append(getCell(item.Reason));

                target.find("tbody").append(row);
            });
        };

        function processQuery() {
            function getModel() {
                const form = window.serializeForm($("#Annotation"));
                form.Book = model.Book;
                return form;
            };

            function displayGrid(target) {
                function request(model) {
                    const url = "/dashboard/finance/tasks/journal/view";
                    const data = JSON.stringify(model);
                    return window.getAjaxRequest(url, "POST", data);
                };

                const model = getModel();

                const ajax = request(model);

                ajax.success(function(response) {
                    displayTable(target, response);
                    target.removeClass("loading");
                });

                ajax.fail(function(xhr) {
                    window.logAjaxErrorMessage(xhr);
                });
            };

            const view = $("#JournalView").addClass("loading");

            displayGrid(view);
        };

        $("#ShowButton").off("click").on("click", function() {
            processQuery();
        });

        loadDatepicker();

        $(".title.header").html(model.Title);

        if (model.AddNewText) {
            $("#AddNewButton").html(model.AddNewText);
            $("#AddNewButton").attr("href", model.AddNewUrl);
        } else {
            $("#AddNewButton").remove();
        }

        if (model.ReturnText) {
            $("#ReturnButton").html(model.ReturnText);
            $("#ReturnButton").attr("href", model.ReturnUrl);
        } else {
            $("#ReturnButton").remove();
        }

        setTimeout(function() {
            processQuery();
        }, 1000);
    };

    function showJournalAdvice(tranId) {
        $(".modal iframe").attr("src",
            `/dashboard/reports/source/Areas/MixERP.Finance/Reports/JournalEntry.xml?transaction_master_id=${tranId}`);

        setTimeout(function() {
            $(".advice.modal")
                .modal('setting', 'transition', 'horizontal flip')
                .modal("show");

        }, 300);
    };

    $(".ui.export.dropdown").dropdown();

    function getTitle() {
        return $(".huge.title.header").text().trim();
    };

    function createPDF() {
        const table = $("#JournalView").clone();
        window.printGridView(getTitle(), table, '', 2, 0, $("#MarkupHidden"), downloadPDF);
    };

    function createXls() {
        const table = $("#JournalView").clone();

        window.printGridView(getTitle(), table, '', 2, 0, $("#MarkupHidden"), downloadExcel);
    };

    function createDoc() {
        const table = $("#JournalView").clone();

        window.printGridView(getTitle(), table, '', 2, 0, $("#MarkupHidden"), downloadWord);
    };

    function print() {
        const table = $("#JournalView").clone();

        window.printGridView(getTitle(), table, '', 2, 0);
    };


    function startDownload(path, fileName) {
        const anchor = $("#DownloadAnchor");
        anchor.attr("target", "_self");
        anchor.attr("href", path);
        anchor.attr("download", fileName);
        anchor[0].click();
    };


    function downloadFile(extension) {
        function request(model) {
            const url = `/dashboard/reports/export/${extension}`;

            const data = JSON.stringify(model);
            return window.getAjaxRequest(url, "POST", data);
        };

        function getModel() {
            const html = $("#MarkupHidden").val();
            const fileName = getTitle() + "." + extension;

            return {
                Html: html,
                DocumentName: fileName
            };
        };

        var model = getModel();
        const ajax = request(model);

        ajax.success(function(response) {
            startDownload(response, model.DocumentName);
        });

        ajax.fail(function(xhr) {
            window.logAjaxErrorMessage(xhr);
        });
    };

    function downloadPDF() {
        downloadFile("pdf");
    };


    function downloadExcel() {
        downloadFile("xls");
    };


    function downloadWord() {
        downloadFile("docx");
    };


</script>